//! Clock Management
//!
//! After Reset:
//!
//! On any Reset the synchronous clocks start to their initial state:
//!
//! • DFLL48M is enabled and configured to run at 48MHz
//! • Generic Generator 0 uses DFLL48M as source and generates GCLK_MAIN
//! • CPU and BUS clocks are undivided
//!
//! On a Power-on Reset, the 32KHz clock sources are reset and the GCLK module
//! starts to its initial state:
//!
//! • All Generic Clock Generators are disabled except
//!   – Generator 0 is using DFLL48M at 48MHz as source and generates GCLK_MAIN
//! • All Peripheral Channels in GCLK are disabled.
//!
//! On a User Reset the GCLK module starts to its initial state, except for:
//!
//! • Generic Clocks that are write-locked, i.e., the according WRTLOCK is set
//!   to 1 prior to Reset
//!
//! First items to implement:
//! - enable CLK_USB_AHB in main clock module (MCLK)
//!   - note defaul state in `Peripheral Clock Masking`
//! - GCLK_USB clocking the USB, configured in the Generic Clock Controller.
//! - GCLK_USB must be 48 MHz
//! - GCLK_USB_AHB must be minimum 8 MHz.
//! - GCLK_USB is generated by DFLL48 using a reference clock.
//!
//!
//! GCLK
//! ====
//!
//! The GCLK module is comprised of twelve generic clock generators, sourcing up
//! to 48 peripheral channels and the main clock signal.
//!
//! A clock source selected as an input to a generator can either be used
//! directly, or it can be prescaled in the generator.
//!
//!
//! Initialization
//!
//! Before a generator is enabled, the corresponding clock source should be
//! enabled. The Peripheral clock must be configured as outlined by the
//! following steps:
//!
//! 1. The generator must be enabled (GENCTRLn.GENEN=1) and the division factor
//!    must be set (GENTRLn.DIVSEL and GENCTRLn.DIV) by performing a single
//!    32-bit write to the generator control register (GENCTRLn)
//!
//! 2. The Generic clock for a peripheral must be configured by writing to the
//!    peripheral channel control register (PCHCTRLm) belonging to the
//!    peripheral. The generator used as the source for the peripheral clock
//!    must be written to the GEN bit field.
//!
//! Note: Each Generator n is configured by one dedicated register GENCTRLn
//! Note: Each Peripheral Channel m is configured by one dedicated register
//!       PCHCTRLm.
//!
//!
//! Enabling, Disabling, and Resetting
//!
//! The GCLK module has no enabled/disable bit to enable or disable the whole
//! module.
//!
//! The GCLK is reset by setting the Software Reset bit in the control A
//! register to 1. All registers in the GCLK will be reset to their initial
//! state, except for peripheral channels and associated generators who are
//! locked.
//!
const microzig = @import("microzig");
const peripherals = microzig.chip.peripherals;
const GCLK = peripherals.GCLK;

/// Index into the PCHCTRL[m] array
pub const PeripheralIndex = enum(u5) {
    GCLK_OSCCTRL_DFLL48 = 0,
    GCLK_OSCCTRL_FDPLL0 = 1,
    GCLK_OSCCTRL_FDPLL1 = 2,
    // TODO:
    //3 GCLK_OSCCTRL_FDPLL0_32K GCLK_OSCCTRL_FDPLL1_32K GCLK_SDHC0_SLOW GCLK_SDHC1_SLOW GCLK_SERCOM[0..7]_SLOW
    //FDPLL0 32KHz clock for internal lock timer FDPLL1 32KHz clock for internal lock timer SDHC0 Slow
    //SDHC1 Slow
    //SERCOM[0..7] Slow
    GCLK_EIC = 4,
    GCLK_FREQM_MSR = 5,
    GCLK_FREQM_REF = 6,
    GCLK_SERCOM0_CORE = 7,
    GCLK_SERCOM1_CORE = 8,
    GCLK_TC0_TC1 = 9,
    GCLK_USB = 10,
    // TODO:
    //22:11 GCLK_EVSYS[0..11] EVSYS[0..11]
    GCLK_SERCOM2_CORE = 23,
    GCLK_SERCOM3_CORE = 24,
    GCLK_TCC0_TCC1 = 25,
    GCLK_TC2_TC3 = 26,
    GCLK_CAN0 = 27,
    GCLK_CAN1 = 28,
    GCLK_TCC2_TCC3 = 29,
    GCLK_TC4_TC5 = 30,
    GCLK_PDEC = 31,
    GCLK_AC = 32,
    GCLK_CCL = 33,
    GCLK_SERCOM4_CORE = 34,
    GCLK_SERCOM5_CORE = 35,
    GCLK_SERCOM6_CORE = 36,
    GCLK_SERCOM7_CORE = 37,
    GCLK_TCC4 = 38,
    GCLK_TC6_TC7 = 39,
    GCLK_ADC0 = 40,
    GCLK_ADC1 = 41,
    GCLK_DAC = 42,
    GCLK_I2S = 43, // TODO: and 44?
    GCLK_SDHC0 = 45,
    GCLK_SDHC1 = 46,
    GCLK_CM4_TRACE = 47,
};

/// Set the Generic CLock Generator for a peripheral
pub fn set_peripheral_clk_gen(peripheral: PeripheralIndex, clk_gen: u4) void {
    GCLK.PCHCTRL[@intFromEnum(peripheral)].modify(.{
        .GEN = clk_gen,
    });
}

pub fn enable_apb(peripheral: Peripheral) void {
}

pub fn enable_ahb(peripheral: Peripheral) void {
}
